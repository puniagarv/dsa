
/* this is used to find the range sum or range query quetion efficiently
  
  it is also know as BIT (binary index tree)
  
  it is an array which is always 1 based index.

  range sum and point updation 

  */

#include<bits/stdc++.h>
using namespace std;

vector<int>bit;
int n;

void update(int id,int val)
{
   while(id <= n)
   {
    
     bit[id]+=val;
     id += (id & -id);

   }

}

int query(int id)
{  
	int ans=0;

	while(id > 0)
	{
		ans+= bit[id];
		id-=(id&-id);
	}

	return ans;
}

int main()
{
  cin>>n;
  
 bit=vector<int>(n+1,0);
 
 vector<int>a(n+1,0);

 for(int i=1 ; i <= n ; i++)
 {
 	cin>>a[i];
 	update(i,a[i]);
 }

 int q;
 cin>>q;

 while(q--)
 {
    int querytype;

    cin>>querytype;

    if(querytype==1) // range sum
    {
       int r,l;
       cin>>r>>l;

       cout<<query(r)-query(l-1);

    }

    else
    {         // replace the id element with new 
       
       int id,val;
       cin>>id>>val;

       update(id,-a[id]); // remove that value from the array

       a[id]=val; // update the original array

       update(id,a[id]); // update the bit array

    }

 }


}
