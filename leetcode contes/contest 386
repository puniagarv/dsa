// we have to find the bottom coordinate which can be maximum and also try to find the coordinate of top most which are valid
// and check the condition for which the rectange are overlapping 
// we can make the every rectangle pair with each other and then check for the overlapping

class Solution {
public:
    
    long long largestSquareArea(vector<vector<int>>& bottomLeft, vector<vector<int>>& topRight) 
    {
        int n = bottomLeft.size();
        
        long long int temp=0;
        
        long long int area = 0;
        
        for(int i=0; i< n;i++)
        {
            for(int j = i+1 ; j < n ;j++)
            {
               int MINx = max(bottomLeft[i][0],bottomLeft[j][0]); // finding the maximum bottom left x coordinate
               int MINy = max(bottomLeft[i][1],bottomLeft[j][1]); //  finding the maximum bottom left y coordinate
               int MAXx = min(topRight[i][0],topRight[j][0]); //  finding the minumum topright x coordinate
               int MAXy = min(topRight[i][1],topRight[j][1]); //  finding the minimum topright y coordinate
                
                if(MINx < MAXx && MINy < MAXy) // check the condition for which overlapping is valid
                {
                   long long int side = min((MAXx-MINx),(MAXy-MINy));
                    area = max(area,(side*side));
                }
            }
        }
        
        return area;
            
    }
};
