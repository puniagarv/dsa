/*Intuition
bitwise operation is neede go bit by bit and storing the xor result in a array and finally count the diiference between k bit and storing bits

Approach
by bit operation

Complexity
Time complexity:
o(n*m + p)// where m is the mazimum bit persent in a element of nums where p represent the bits present in k number

Space complexity:
Code*/
class Solution {
public:
    int minOperations(vector<int>& nums, int k) 
    {
        int n=nums.size();
        vector<int>bit1(32,0);
        vector<int>bit2(32,0);
         for(int j=0;j<n;j++)
           {    
                int i=0;

               while(nums[j] > 0)
                   
               {
                 if(nums[j]%2==0)
                    bit1[i]^=0;
                 else
                    bit1[i]^=1;

                 nums[j]=nums[j]/2;
                 i++;
               }

           }
        
            int ans=0;
    int i=0;

   while(k > 0) 
   {
     if(k%2==0)
     	bit2[i]=0;
     else
     	bit2[i]=1;
     k=k/2;
     i++;

   }

   for(int i=0;i<32;i++)
   {
   	 if(bit1[i]!=bit2[i])ans++;
   }
        return ans;
    }
};
