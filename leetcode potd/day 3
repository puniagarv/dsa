/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) 
    {
       queue<pair<TreeNode *,int>>q;
       q.push({root,0});

       int level=0;

       
     
       unordered_map<int,int>mp;
  

       while(!q.empty())
       {
           auto it = q.front();

           TreeNode * node = it.first;

           level = it.second;
           q.pop();
         
         
         if(mp.find(level)==mp.end())
         {
           mp[level] = node->val;
         }

          if(node->left!=NULL)
          {
              q.push({node->left,level+1});
          }
         

          if(node->right!=NULL)
          {
            q.push({node->right,level + 1});
          }       

       }
      
      cout<<level;
      return mp[level];

    }
};
