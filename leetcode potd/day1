class Solution {
public:
    

    int method1(int n, vector<vector<int>>& flights, int src, int dst, int k)
    {
         queue<pair<int,int>>pq;

        vector<int>dis(n,INT_MAX);

        vector<vector<int>>adj[n];
        
        for(auto it : flights)
        {
            adj[it[0]].push_back({it[1],it[2]});
        }


        int step=0;
        
        pq.push({0,src});

        while(!pq.empty() && step <= k)
        {
           int size = pq.size();

           while(size--)
           {
              int node = pq.front().second;
              int distance = pq.front().first;
              pq.pop();

              for(auto it : adj[node])
              {
                  int child = it[0];
                  int cost = it[1];

                  if(cost + distance < dis[child])
                  {
                      dis[child] = cost + distance;

                      pq.push({dis[child],child});
                  }
              }

           }

           step++;

        }

        return dis[dst]==INT_MAX ? -1 : dis[dst];
    }

    int method2(int n, vector<vector<int>>& flights, int src, int dst, int k)
    {
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>>pq;
        
        vector<vector<int>>adj[n];

        vector<int>stops(n,INT_MAX);

        for(auto it : flights)
        {
            adj[it[0]].push_back({it[1],it[2]});
        }

        pq.push({0,src,0});

        while(!pq.empty())
        {
            int size = pq.size();
            while(size --)
            {
               auto v = pq.top();
               pq.pop();
               
               int dis = v[0];
               int node = v[1];
               int step = v[2];

              
              if(step > stops[node] || step > k + 1) continue;
              
              if(node == dst)return dis;
              stops[node]=step;

              for(auto it : adj[node])
              {   
                  int child = it[0];
                  int cost = it[1];

                  pq.push({dis+cost,child,step+1});
              }

            }
        }

        return -1;

    }

    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) 
    {
        // return method1(n,flights,src,dst,k); // using simple bfs
        return method2(n,flights,src,dst,k); // using priority queue

    }
};
